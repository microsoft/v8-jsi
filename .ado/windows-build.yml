parameters:
- name: appPlatform
  type: string
- name: outputPath
  type: string
  # isPublish is `true` for CI builds and `false` for PR validation.
- name: isPublish
  type: boolean
  default: false
- name: buildConfiguration
  type: string
- name: buildPlatform
  type: string
  # To fake building v8-jsi for faster debugging.
- name: fakeBuild
  type: boolean
  default: false


steps:
- ${{ if eq(parameters.fakeBuild, false) }}:
  - task: PowerShell@2
    displayName: Download and extract depot_tools.zip
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)\scripts\download_depottools.ps1
      arguments:
        -SourcesPath:$(Build.SourcesDirectory)

  - task: PowerShell@2
    displayName: Fetch the V8 source code and extra build tools
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)\scripts\fetch_code.ps1
      arguments:
        -SourcesPath:$(Build.SourcesDirectory)
        -Configuration:${{parameters.buildConfiguration}}
        -AppPlatform:${{parameters.appPlatform}}

- task: PowerShell@2
  displayName: Build code
  inputs:
    targetType: filePath
    filePath: $(Build.SourcesDirectory)\scripts\build.ps1
    arguments:
      -OutputPath:${{parameters.outputPath}}
      -SourcesPath:$(Build.SourcesDirectory)
      -Platform:${{parameters.buildPlatform}}
      -Configuration:${{parameters.buildConfiguration}}
      -AppPlatform:${{parameters.appPlatform}}
      -FakeBuild:$${{parameters.fakeBuild}}

- ${{ if eq(parameters.fakeBuild, false) }}:
  - script: |
      dir build\v8\buildtools\reclient\scandeps_server.exe
      taskkill -f -im scandeps_server.exe
      attrib -r build\v8\buildtools\reclient\scandeps_server.exe
      del build\v8\buildtools\reclient\scandeps_server.exe
    displayName: Delete build infrastructure file, for compliant tooling

  - powershell: |
      $vsExtensionPath="${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\";
      Write-Host "Searching for Google Test Adapter Path in '$vsExtensionPath'"
      $GoogleTestAdapterPath=(Get-ChildItem $vsExtensionPath -Directory | Where-Object -FilterScript {Test-Path  (Join-Path -Path $_.FullName -ChildPath "GoogleTestAdapter.Core.dll")}).FullName
      Write-Host "Found:" (Test-Path -Path $GoogleTestAdapterPath)
      Write-Host "Setting Google Test Adapter Path to '$GoogleTestAdapterPath'"
      Write-Host "##vso[task.setvariable variable=GoogleTestAdapterPath]$GoogleTestAdapterPath"
    displayName: Set GoogleTestAdapterPath

  - task: VSTest@2
    displayName: Run JSI Unit Tests
    timeoutInMinutes: 5
    inputs:
      testSelector: testAssemblies
      testAssemblyVer2: jsitests.exe
      pathtoCustomTestAdapters: $(GoogleTestAdapterPath)
      searchFolder: $(Build.SourcesDirectory)/build/v8/out/${{parameters.appPlatform}}/${{parameters.buildPlatform}}/${{parameters.buildConfiguration}}
      runTestsInIsolation: true
      platform: ${{parameters.buildPlatform}}
      configuration: ${{parameters.buildConfiguration}}
      publishRunAttachments: true
      collectDumpOn: onAbortOnly
      vsTestVersion: latest
    condition: and(succeeded(), not(startsWith('${{parameters.buildPlatform}}', 'arm')))

  - task: VSTest@2
    displayName: Run Node-API Unit Tests
    timeoutInMinutes: 5
    inputs:
      testSelector: testAssemblies
      testAssemblyVer2: node_api_tests.exe
      pathtoCustomTestAdapters: $(GoogleTestAdapterPath)
      searchFolder: $(Build.SourcesDirectory)/build/v8/out/${{parameters.appPlatform}}/${{parameters.buildPlatform}}/${{parameters.buildConfiguration}}
      runTestsInIsolation: true
      platform: ${{parameters.buildPlatform}}
      configuration: ${{parameters.buildConfiguration}}
      publishRunAttachments: true
      collectDumpOn: onAbortOnly
      vsTestVersion: latest
    condition: and(succeeded(), not(startsWith('${{parameters.buildPlatform}}', 'arm')))
