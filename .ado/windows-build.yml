# Expected variables:
#   RunUnitTests

parameters:
- name: appPlatform
  type: string
- name: outputPath
  type: string

variables:
  # SBOM signing only works on microsoft ADO
  Packaging.EnableSBOMSigning: ${{ startsWith(variables['System.CollectionUri'], 'https://dev.azure.com/microsoft') }}

steps:
  - task: PowerShell@2
    displayName: Download and extract depot_tools.zip
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)\scripts\download_depottools.ps1
      arguments:
        -SourcesPath:$(Build.SourcesDirectory)

  - task: PowerShell@2
    displayName: Fetch the V8 source code and extra build tools
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)\scripts\fetch_code.ps1
      arguments:
        -SourcesPath:$(Build.SourcesDirectory)
        -Configuration:$(BuildConfiguration)
        -AppPlatform:${{parameters.appPlatform}}

  - task: PowerShell@2
    displayName: Build code
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)\scripts\build.ps1
      arguments:
        -OutputPath:${{parameters.outputPath}}
        -SourcesPath:$(Build.SourcesDirectory)
        -Platform:$(BuildPlatform)
        -Configuration:$(BuildConfiguration)
        -AppPlatform:${{parameters.appPlatform}}

  - powershell: |
      $vsExtensionPath="${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\";
      Write-Host "Searching for Google Test Adapter Path in '$vsExtensionPath'"
      $GoogleTestAdapterPath=(Get-ChildItem $vsExtensionPath -Directory | Where-Object -FilterScript {Test-Path  (Join-Path -Path $_.FullName -ChildPath "GoogleTestAdapter.Core.dll")}).FullName
      Write-Host "Found:" (Test-Path -Path $GoogleTestAdapterPath)
      Write-Host "Setting Google Test Adapter Path to '$GoogleTestAdapterPath'"
      Write-Host "##vso[task.setvariable variable=GoogleTestAdapterPath]$GoogleTestAdapterPath"
    displayName: Set GoogleTestAdapterPath

  - task: VSTest@2
    displayName: Run Unit Tests
    timeoutInMinutes: 2
    inputs:
      testSelector: testAssemblies
      testAssemblyVer2: jsitests.exe
      pathtoCustomTestAdapters: $(GoogleTestAdapterPath)
      searchFolder: $(Build.SourcesDirectory)/build/v8build/v8/out/${{parameters.appPlatform}}/$(BuildPlatform)/$(BuildConfiguration)
      runTestsInIsolation: true
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      publishRunAttachments: true
      collectDumpOn: onAbortOnly
      vsTestVersion: latest
    condition: and(succeeded(), not(startsWith(variables.BuildPlatform, 'arm')), eq(variables.RunUnitTests, true))

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      ignoreDirectories: 'build\v8build\depot_tools'

  - script: mkdir ${{parameters.outputPath}}\_manifest\$(BuildPlatform)\$(BuildConfiguration)
    displayName: ðŸ“’ Prep Manifest

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: ðŸ“’ Generate Manifest
    inputs:
      BuildDropPath: ${{parameters.outputPath}}
      ManifestDirPath: ${{parameters.outputPath}}\_manifest\$(BuildPlatform)\$(BuildConfiguration)

  # Guardian does not handle custom builds, so manually running Binskim
  - task: BinSkim@3
    displayName: Run Binskim Analysis
    inputs:
        InputType: 'Basic'
        Function: 'analyze'
        AnalyzeTarget: $(Build.ArtifactStagingDirectory)/**/*.dll
        AnalyzeVerbose: true
        toolVersion: 'LatestPreRelease'
    continueOnError: true
    condition: and(eq(variables.BuildConfiguration, 'Release'), not(eq(variables.BuildPlatform, 'arm64')))

  - task: PublishBuildArtifacts@1
    displayName: "Publish artifacts"
    inputs:
      artifactName: V8Jsi
      pathtoPublish: ${{parameters.outputPath}}

  - task: ComponentGovernanceComponentDetection@0
