diff --git a/BUILD.gn b/BUILD.gn
index dd97c4f922..53948090e1 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -1490,7 +1490,7 @@ config("toolchain") {
   if (is_win) {
     cflags += [
       "/wd4245",  # Conversion with signed/unsigned mismatch.
-      "/wd4267",  # Conversion with possible loss of data.
+      #"/wd4267",  # Conversion with possible loss of data.
       "/wd4324",  # Padding structure due to alignment.
       "/wd4701",  # Potentially uninitialized local variable.
       "/wd4702",  # Unreachable code.
@@ -1594,14 +1594,14 @@ config("toolchain") {
 
       "/wd4100",  # Unreferenced formal function parameter.
       "/wd4121",  # Alignment of a member was sensitive to packing.
-      "/wd4244",  # Conversion: possible loss of data.
+      #"/wd4244",  # Conversion: possible loss of data.
       "/wd4505",  # Unreferenced local function has been removed.
       "/wd4510",  # Default constructor could not be generated.
       "/wd4512",  # Assignment operator could not be generated.
       "/wd4610",  # Class can never be instantiated, constructor required.
       "/wd4838",  # Narrowing conversion. Doesn't seem to be very useful.
-      "/wd4995",  # 'X': name was marked as #pragma deprecated
-      "/wd4996",  # Deprecated function warning.
+      #"/wd4995",  # 'X': name was marked as #pragma deprecated
+      #"/wd4996",  # Deprecated function warning.
 
       # These are variable shadowing warnings that are new in VS2015. We
       # should work through these at some point -- they may be removed from
@@ -1625,7 +1625,7 @@ config("toolchain") {
       "/wd4245",  # 'conversion' : conversion from 'type1' to 'type2',
                   # signed/unsigned mismatch
 
-      "/wd4267",  # 'var' : conversion from 'size_t' to 'type', possible loss of
+      #"/wd4267",  # 'var' : conversion from 'size_t' to 'type', possible loss of
                   # data
 
       "/wd4305",  # 'identifier' : truncation from 'type1' to 'type2'
@@ -6932,26 +6932,6 @@ group("v8_python_base") {
   data = [ ".vpython3" ]
 }
 
-group("v8_clusterfuzz") {
-  testonly = true
-
-  deps = [
-    ":d8",
-    ":v8_simple_inspector_fuzzer",
-    "tools/clusterfuzz/trials:v8_clusterfuzz_resources",
-  ]
-
-  if (v8_multi_arch_build) {
-    deps += [
-      ":d8(//build/toolchain/linux:clang_x64)",
-      ":d8(//build/toolchain/linux:clang_x64_v8_arm64)",
-      ":d8(//build/toolchain/linux:clang_x86)",
-      ":d8(//build/toolchain/linux:clang_x86_v8_arm)",
-      ":d8(tools/clusterfuzz/foozzie/toolchain:clang_x64_pointer_compression)",
-    ]
-  }
-}
-
 # Targets we ensure work with gcc. The aim is to keep this list small to have
 # a fast overall compile time.
 group("v8_gcc_light") {
@@ -7186,7 +7166,7 @@ v8_executable("d8") {
   }
 
   if (v8_correctness_fuzzer) {
-    deps += [ "tools/clusterfuzz/foozzie:v8_correctness_fuzzer_resources" ]
+    # deps += [ "tools/clusterfuzz/foozzie:v8_correctness_fuzzer_resources" ]
   }
 
   defines = []
@@ -7881,3 +7861,9 @@ if (!build_with_chromium && v8_use_perfetto) {
     ]
   }
 }  # if (!build_with_chromium && v8_use_perfetto)
+
+group("jsi") {
+  deps = [
+    "jsi:v8jsi",
+  ]
+}
diff --git a/DEPS b/DEPS
index 5cffcad442..f8264e6c44 100644
--- a/DEPS
+++ b/DEPS
@@ -680,4 +680,15 @@ hooks = [
     'condition': 'host_os == "win"',
     'action': ['python3', 'build/del_ninja_deps_cache.py'],
   },
+  {
+    'name': 'rc_win',
+    'pattern': '.',
+    'condition': 'checkout_win and host_os == "win"',
+    'action': [ 'download_from_google_storage',
+                '--no_resume',
+                '--no_auth',
+                '--bucket', 'chromium-browser-clang/rc',
+                '-s', 'build/toolchain/win/rc/win/rc.exe.sha1',
+    ],
+  }
 ]
diff --git a/src/maglev/maglev-ir.h b/src/maglev/maglev-ir.h
index 888944b606..7bf2c4c7e5 100644
--- a/src/maglev/maglev-ir.h
+++ b/src/maglev/maglev-ir.h
@@ -2258,8 +2258,8 @@ class NodeTMixin : public Base {
   template <typename... Args>
   explicit NodeTMixin(uint64_t bitfield, Args&&... args)
       : Base(bitfield, std::forward<Args>(args)...) {
-    DCHECK_EQ(NodeBase::opcode(), NodeBase::opcode_of<Derived>);
-    DCHECK_EQ(NodeBase::properties(), Derived::kProperties);
+    //DCHECK_EQ(NodeBase::opcode(), NodeBase::opcode_of<Derived>);
+    //DCHECK_EQ(NodeBase::properties(), Derived::kProperties);
   }
 };
 
@@ -2326,7 +2326,7 @@ class FixedInputNodeTMixin : public NodeTMixin<Base, Derived> {
   template <typename... Args>
   explicit FixedInputNodeTMixin(uint64_t bitfield, Args&&... args)
       : NodeTMixin<Base, Derived>(bitfield, std::forward<Args>(args)...) {
-    DCHECK_EQ(NodeBase::input_count(), kInputCount);
+    //DCHECK_EQ(NodeBase::input_count(), kInputCount);
   }
 };
 
diff --git a/src/utils/allocation.cc b/src/utils/allocation.cc
index dc8a3696fa..50bcba0a3b 100644
--- a/src/utils/allocation.cc
+++ b/src/utils/allocation.cc
@@ -64,8 +64,10 @@ const int kAllocationTries = 2;
 }  // namespace
 
 v8::PageAllocator* GetPlatformPageAllocator() {
-  DCHECK_NOT_NULL(GetPageAllocatorInitializer()->page_allocator());
-  return GetPageAllocatorInitializer()->page_allocator();
+  //DCHECK_NOT_NULL(GetPageAllocatorInitializer()->page_allocator());
+  //return GetPageAllocatorInitializer()->page_allocator();
+
+  return V8::GetCurrentPlatform()->GetPageAllocator();
 }
 
 v8::VirtualAddressSpace* GetPlatformVirtualAddressSpace() {
diff --git a/third_party/googletest/BUILD.gn b/third_party/googletest/BUILD.gn
index bc82c635da..648972c77a 100644
--- a/third_party/googletest/BUILD.gn
+++ b/third_party/googletest/BUILD.gn
@@ -88,8 +88,8 @@ source_set("gtest") {
 
   all_dependent_configs = [ ":gtest_config" ]
 
-  configs -= [ "//build/config/compiler:chromium_code" ]
-  configs += [ "//build/config/compiler:no_chromium_code" ]
+  configs -= [ "//build/config/compiler:chromium_code", "//build/config/compiler:no_rtti", "//build/config/compiler:no_exceptions" ]
+  configs += [ "//build/config/compiler:no_chromium_code", "//build/config/compiler:rtti", "//build/config/compiler:exceptions" ]
 
   # V8-only workaround for http://crbug.com/chromium/1191946. Ensures that
   # googletest is compiled with the same visibility such as the rest of V8, see
diff --git a/tools/v8windbg/BUILD.gn b/tools/v8windbg/BUILD.gn
index 5516a6109f..d6cde0082c 100644
--- a/tools/v8windbg/BUILD.gn
+++ b/tools/v8windbg/BUILD.gn
@@ -26,7 +26,7 @@ source_set("v8windbg_base") {
     "DbgEng.lib",
     "DbgModel.lib",
     "RuntimeObject.lib",
-    "comsuppwd.lib",
+    "comsuppw.lib",
   ]
 
   public_configs = [ ":v8windbg_config" ]
