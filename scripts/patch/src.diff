diff --git a/BUILD.gn b/BUILD.gn
index 78fd8cd2d38..949c3e6e5a9 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -1239,7 +1239,7 @@ config("toolchain") {
   } else if (target_os == "mac") {
     defines += [ "V8_HAVE_TARGET_OS" ]
     defines += [ "V8_TARGET_OS_MACOS" ]
-  } else if (target_os == "win") {
+  } else if (target_os == "win" || target_os == "winuwp") {
     defines += [ "V8_HAVE_TARGET_OS" ]
     defines += [ "V8_TARGET_OS_WIN" ]
   }
@@ -1302,7 +1302,7 @@ config("toolchain") {
   if (is_win) {
     cflags += [
       "/wd4245",  # Conversion with signed/unsigned mismatch.
-      "/wd4267",  # Conversion with possible loss of data.
+      #"/wd4267",  # Conversion with possible loss of data.
       "/wd4324",  # Padding structure due to alignment.
       "/wd4701",  # Potentially uninitialized local variable.
       "/wd4702",  # Unreachable code.
@@ -1406,14 +1406,14 @@ config("toolchain") {
 
       "/wd4100",  # Unreferenced formal function parameter.
       "/wd4121",  # Alignment of a member was sensitive to packing.
-      "/wd4244",  # Conversion: possible loss of data.
+      #"/wd4244",  # Conversion: possible loss of data.
       "/wd4505",  # Unreferenced local function has been removed.
       "/wd4510",  # Default constructor could not be generated.
       "/wd4512",  # Assignment operator could not be generated.
       "/wd4610",  # Class can never be instantiated, constructor required.
       "/wd4838",  # Narrowing conversion. Doesn't seem to be very useful.
-      "/wd4995",  # 'X': name was marked as #pragma deprecated
-      "/wd4996",  # Deprecated function warning.
+      #"/wd4995",  # 'X': name was marked as #pragma deprecated
+      #"/wd4996",  # Deprecated function warning.
 
       # These are variable shadowing warnings that are new in VS2015. We
       # should work through these at some point -- they may be removed from
@@ -1437,7 +1437,7 @@ config("toolchain") {
       "/wd4245",  # 'conversion' : conversion from 'type1' to 'type2',
                   # signed/unsigned mismatch
 
-      "/wd4267",  # 'var' : conversion from 'size_t' to 'type', possible loss of
+      #"/wd4267",  # 'var' : conversion from 'size_t' to 'type', possible loss of
                   # data
 
       "/wd4305",  # 'identifier' : truncation from 'type1' to 'type2'
@@ -5574,7 +5574,6 @@ v8_component("v8_libbase") {
     defines += [ "_CRT_RAND_S" ]  # for rand_s()
 
     libs = [
-      "dbghelp.lib",
       "winmm.lib",
       "ws2_32.lib",
     ]
@@ -6291,26 +6290,6 @@ group("v8_python_base") {
   data = [ ".vpython3" ]
 }
 
-group("v8_clusterfuzz") {
-  testonly = true
-
-  deps = [
-    ":d8",
-    ":v8_simple_inspector_fuzzer",
-    "tools/clusterfuzz/trials:v8_clusterfuzz_resources",
-  ]
-
-  if (v8_multi_arch_build) {
-    deps += [
-      ":d8(//build/toolchain/linux:clang_x64)",
-      ":d8(//build/toolchain/linux:clang_x64_v8_arm64)",
-      ":d8(//build/toolchain/linux:clang_x86)",
-      ":d8(//build/toolchain/linux:clang_x86_v8_arm)",
-      ":d8(tools/clusterfuzz/foozzie/toolchain:clang_x64_pointer_compression)",
-    ]
-  }
-}
-
 # Targets we ensure work with gcc. The aim is to keep this list small to have
 # a fast overall compile time.
 group("v8_gcc_light") {
@@ -6538,7 +6517,7 @@ v8_executable("d8") {
   }
 
   if (v8_correctness_fuzzer) {
-    deps += [ "tools/clusterfuzz/foozzie:v8_correctness_fuzzer_resources" ]
+    # deps += [ "tools/clusterfuzz/foozzie:v8_correctness_fuzzer_resources" ]
   }
 
   defines = []
@@ -7248,3 +7227,9 @@ if (!build_with_chromium && v8_use_perfetto) {
     ]
   }
 }  # if (!build_with_chromium && v8_use_perfetto)
+
+group("jsi") {
+  deps = [
+    "jsi:v8jsi",
+  ]
+}
diff --git a/DEPS b/DEPS
index ab0a9bf5431..73c6caac972 100644
--- a/DEPS
+++ b/DEPS
@@ -616,4 +616,15 @@ hooks = [
     'condition': 'host_os == "win"',
     'action': ['python3', 'build/del_ninja_deps_cache.py'],
   },
+  {
+    'name': 'rc_win',
+    'pattern': '.',
+    'condition': 'checkout_win and host_os == "win"',
+    'action': [ 'download_from_google_storage',
+                '--no_resume',
+                '--no_auth',
+                '--bucket', 'chromium-browser-clang/rc',
+                '-s', 'build/toolchain/win/rc/win/rc.exe.sha1',
+    ],
+  }
 ]
diff --git a/gni/snapshot_toolchain.gni b/gni/snapshot_toolchain.gni
index 99de816372b..02dd1355a9e 100644
--- a/gni/snapshot_toolchain.gni
+++ b/gni/snapshot_toolchain.gni
@@ -74,6 +74,9 @@ if (v8_snapshot_toolchain == "") {
     # Cross-build from arm64 to intel (likely on an Apple Silicon mac).
     v8_snapshot_toolchain =
         "//build/toolchain/${host_os}:clang_arm64_v8_$v8_current_cpu"
+  } else if (target_os == "winuwp") {
+    # cross compile UWP Windows with host toolchain (for x64 and x86)
+    v8_snapshot_toolchain = host_toolchain
   } else if (host_cpu == "x64") {
     # This is a cross-compile from an x64 host to either a non-Intel target
     # cpu or to 32-bit x86 on a different target OS.
diff --git a/src/base/debug/stack_trace_win.cc b/src/base/debug/stack_trace_win.cc
index f981bec6101..753438fa4a4 100644
--- a/src/base/debug/stack_trace_win.cc
+++ b/src/base/debug/stack_trace_win.cc
@@ -29,6 +29,35 @@ namespace v8 {
 namespace base {
 namespace debug {
 
+#if 1 // dbghelp dependency unwanted
+
+bool EnableInProcessStackDumping() {
+  return false;
+}
+
+void DisableSignalStackDump() {
+}
+
+StackTrace::StackTrace() {
+}
+
+StackTrace::StackTrace(EXCEPTION_POINTERS* exception_pointers) {
+  InitTrace(exception_pointers->ContextRecord);
+}
+
+StackTrace::StackTrace(const CONTEXT* context) { InitTrace(context); }
+
+void StackTrace::InitTrace(const CONTEXT*) {
+}
+
+void StackTrace::Print() const { OutputToStream(&std::cerr); }
+
+void StackTrace::OutputToStream(std::ostream* os) const {
+    (*os) << "==== C stack trace not implemented for WINUWP ===============================\n";
+}
+
+#else // dbghelp dependency unwanted
+
 namespace {
 
 // Previous unhandled filter. Will be called if not nullptr when we intercept an
@@ -244,6 +273,8 @@ void StackTrace::OutputToStream(std::ostream* os) const {
   }
 }
 
+#endif // dbghelp
+
 }  // namespace debug
 }  // namespace base
 }  // namespace v8
diff --git a/src/base/platform/platform-win32.cc b/src/base/platform/platform-win32.cc
index ac44c70e2c5..9533cb0435e 100644
--- a/src/base/platform/platform-win32.cc
+++ b/src/base/platform/platform-win32.cc
@@ -1370,8 +1370,8 @@ bool AddressSpaceReservation::DecommitPages(void* address, size_t size) {
 #define VOID void
 #endif
 
-// DbgHelp isn't supported on MinGW yet
-#ifndef __MINGW32__
+// DbgHelp isn't supported on Windows
+#if 0
 // DbgHelp.h functions.
 using DLL_FUNC_TYPE(SymInitialize) = BOOL(__stdcall*)(IN HANDLE hProcess,
                                                       IN PSTR UserSearchPath,
diff --git a/src/diagnostics/unwinding-info-win64.cc b/src/diagnostics/unwinding-info-win64.cc
index 767eb015ab1..47f05a1b946 100644
--- a/src/diagnostics/unwinding-info-win64.cc
+++ b/src/diagnostics/unwinding-info-win64.cc
@@ -535,7 +535,7 @@ void RegisterNonABICompliantCodeRange(void* start, size_t size_in_bytes) {
   // by the embedder (like Crashpad).
 
   if (RegisterUnwindInfoForExceptionHandlingOnly()) {
-#if defined(V8_OS_WIN_X64)
+#if 0
     // Windows ARM64 starts since 1709 Windows build, no need to have exception
     // handling only unwind info for compatibility.
     if (unhandled_exception_callback_g) {
@@ -574,7 +574,7 @@ void UnregisterNonABICompliantCodeRange(void* start) {
   DCHECK(CanRegisterUnwindInfoForNonABICompliantCodeRange());
 
   if (RegisterUnwindInfoForExceptionHandlingOnly()) {
-#if defined(V8_OS_WIN_X64)
+#if 0
     // Windows ARM64 starts since 1709 Windows build, no need to have exception
     // handling only unwind info for compatibility.
     if (unhandled_exception_callback_g) {
diff --git a/src/objects/scope-info.cc b/src/objects/scope-info.cc
index c0117d27c9f..d4ccf386451 100644
--- a/src/objects/scope-info.cc
+++ b/src/objects/scope-info.cc
@@ -1028,6 +1028,8 @@ int ScopeInfo::ParametersStartIndex() const {
 }
 
 int ScopeInfo::FunctionContextSlotIndex(String name) const {
+  // This debug check in failing when running CPU profiler on some V8-JSI instances
+  // TODO: Investigate and find the root cause
   DCHECK(name.IsInternalizedString());
   if (HasContextAllocatedFunctionName()) {
     DCHECK_IMPLIES(HasFunctionName(), FunctionName().IsInternalizedString());
diff --git a/src/objects/simd.cc b/src/objects/simd.cc
index 4fa55e4cc76..6a6d7ab414c 100644
--- a/src/objects/simd.cc
+++ b/src/objects/simd.cc
@@ -23,7 +23,7 @@
 #include <immintrin.h>
 #endif
 
-#ifdef V8_HOST_ARCH_ARM64
+#if defined(V8_HOST_ARCH_ARM64) && !defined(_WIN32)
 // We use Neon only on 64-bit ARM (because on 32-bit, some instructions and some
 // types are not available). Note that ARM64 is guaranteed to have Neon.
 #define NEON64
diff --git a/src/snapshot/embedded/platform-embedded-file-writer-base.cc b/src/snapshot/embedded/platform-embedded-file-writer-base.cc
index e0602edc7e1..4123b90e1b7 100644
--- a/src/snapshot/embedded/platform-embedded-file-writer-base.cc
+++ b/src/snapshot/embedded/platform-embedded-file-writer-base.cc
@@ -138,7 +138,7 @@ EmbeddedTargetOs ToEmbeddedTargetOs(const char* s) {
     return EmbeddedTargetOs::kFuchsia;
   } else if (string == "ios" || string == "mac") {
     return EmbeddedTargetOs::kMac;
-  } else if (string == "win") {
+  } else if (string == "win" || string == "winuwp") {
     return EmbeddedTargetOs::kWin;
   } else if (string == "starboard") {
     return EmbeddedTargetOs::kStarboard;
diff --git a/src/trap-handler/handler-inside-win.cc b/src/trap-handler/handler-inside-win.cc
index 3d7a2c416aa..9a48c27d66e 100644
--- a/src/trap-handler/handler-inside-win.cc
+++ b/src/trap-handler/handler-inside-win.cc
@@ -62,6 +62,7 @@ extern "C" char v8_probe_memory_continuation[];
 #endif  // V8_TRAP_HANDLER_VIA_SIMULATOR
 
 bool TryHandleWasmTrap(EXCEPTION_POINTERS* exception) {
+#if V8_TRAP_HANDLER_SUPPORTED
   // VectoredExceptionHandlers need extreme caution. Do as little as possible
   // to determine if the exception should be handled or not. Exceptions can be
   // thrown very early in a threads life, before the thread has even completed
@@ -122,6 +123,9 @@ bool TryHandleWasmTrap(EXCEPTION_POINTERS* exception) {
   // We will return to wasm code, so restore the g_thread_in_wasm_code flag.
   g_thread_in_wasm_code = true;
   return true;
+#else // V8_TRAP_HANDLER_SUPPORTED
+  return true;
+#endif
 }
 
 LONG HandleWasmTrap(EXCEPTION_POINTERS* exception) {
diff --git a/src/trap-handler/handler-outside-simulator.cc b/src/trap-handler/handler-outside-simulator.cc
index 5e58719e7fc..301bd942de6 100644
--- a/src/trap-handler/handler-outside-simulator.cc
+++ b/src/trap-handler/handler-outside-simulator.cc
@@ -14,6 +14,12 @@
 #define SYMBOL(name) #name
 #endif  // !V8_OS_DARWIN
 
+#if V8_TARGET_ARCH_ARM64 && V8_OS_WIN
+
+// ARM64 Windows can't compile this
+
+#else
+
 // Define the ProbeMemory function declared in trap-handler-simulators.h.
 asm(
     ".globl " SYMBOL(ProbeMemory) "                 \n"
@@ -40,3 +46,5 @@ asm(
     "  ret                                          \n");
 
 #endif
+
+#endif
\ No newline at end of file
diff --git a/src/utils/allocation.cc b/src/utils/allocation.cc
index a585bfed680..cfdb0424773 100644
--- a/src/utils/allocation.cc
+++ b/src/utils/allocation.cc
@@ -64,8 +64,10 @@ const int kAllocationTries = 2;
 }  // namespace
 
 v8::PageAllocator* GetPlatformPageAllocator() {
-  DCHECK_NOT_NULL(GetPageAllocatorInitializer()->page_allocator());
-  return GetPageAllocatorInitializer()->page_allocator();
+  //DCHECK_NOT_NULL(GetPageAllocatorInitializer()->page_allocator());
+  //return GetPageAllocatorInitializer()->page_allocator();
+
+  return V8::GetCurrentPlatform()->GetPageAllocator();
 }
 
 v8::VirtualAddressSpace* GetPlatformVirtualAddressSpace() {
diff --git a/third_party/googletest/BUILD.gn b/third_party/googletest/BUILD.gn
index bc82c635da3..648972c77a2 100644
--- a/third_party/googletest/BUILD.gn
+++ b/third_party/googletest/BUILD.gn
@@ -88,8 +88,8 @@ source_set("gtest") {
 
   all_dependent_configs = [ ":gtest_config" ]
 
-  configs -= [ "//build/config/compiler:chromium_code" ]
-  configs += [ "//build/config/compiler:no_chromium_code" ]
+  configs -= [ "//build/config/compiler:chromium_code", "//build/config/compiler:no_rtti", "//build/config/compiler:no_exceptions" ]
+  configs += [ "//build/config/compiler:no_chromium_code", "//build/config/compiler:rtti", "//build/config/compiler:exceptions" ]
 
   # V8-only workaround for http://crbug.com/chromium/1191946. Ensures that
   # googletest is compiled with the same visibility such as the rest of V8, see
diff --git a/tools/v8windbg/BUILD.gn b/tools/v8windbg/BUILD.gn
index 5516a6109f2..d6cde0082c6 100644
--- a/tools/v8windbg/BUILD.gn
+++ b/tools/v8windbg/BUILD.gn
@@ -26,7 +26,7 @@ source_set("v8windbg_base") {
     "DbgEng.lib",
     "DbgModel.lib",
     "RuntimeObject.lib",
-    "comsuppwd.lib",
+    "comsuppw.lib",
   ]
 
   public_configs = [ ":v8windbg_config" ]
