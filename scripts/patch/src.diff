diff --git a/BUILD.gn b/BUILD.gn
index 5c7d931b27..a13c41a1c4 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -1178,7 +1178,7 @@ config("toolchain") {
   } else if (target_os == "mac") {
     defines += [ "V8_HAVE_TARGET_OS" ]
     defines += [ "V8_TARGET_OS_MACOSX" ]
-  } else if (target_os == "win") {
+  } else if (target_os == "win" || target_os == "winuwp") {
     defines += [ "V8_HAVE_TARGET_OS" ]
     defines += [ "V8_TARGET_OS_WIN" ]
   }
@@ -4963,7 +4963,6 @@ v8_component("v8_libbase") {
     defines += [ "_CRT_RAND_S" ]  # for rand_s()
 
     libs = [
-      "dbghelp.lib",
       "winmm.lib",
       "ws2_32.lib",
     ]
@@ -6579,3 +6578,9 @@ if (!build_with_chromium && v8_use_perfetto) {
     ]
   }
 }  # if (!build_with_chromium && v8_use_perfetto)
+
+group("jsi") {
+  deps = [
+    "jsi:v8jsi",
+  ]
+}
\ No newline at end of file
diff --git a/DEPS b/DEPS
index 8059e3b8c3..a30b143fe5 100644
--- a/DEPS
+++ b/DEPS
@@ -591,4 +591,15 @@ hooks = [
       'tools/generate-header-include-checks.py',
     ],
   },
+  {
+    'name': 'rc_win',
+    'pattern': '.',
+    'condition': 'checkout_win and host_os == "win"',
+    'action': [ 'download_from_google_storage',
+                '--no_resume',
+                '--no_auth',
+                '--bucket', 'chromium-browser-clang/rc',
+                '-s', 'build/toolchain/win/rc/win/rc.exe.sha1',
+    ],
+  }
 ]
diff --git a/gni/snapshot_toolchain.gni b/gni/snapshot_toolchain.gni
index feabd079e0..d9651731e4 100644
--- a/gni/snapshot_toolchain.gni
+++ b/gni/snapshot_toolchain.gni
@@ -70,6 +70,9 @@ if (v8_snapshot_toolchain == "") {
     # therefore snapshots will need to be built using native mksnapshot
     # in combination with qemu
     v8_snapshot_toolchain = current_toolchain
+  } else if (target_os == "winuwp") {
+    # cross compile UWP Windows with host toolchain (for x64 and x86)
+    v8_snapshot_toolchain = host_toolchain
   } else if (host_cpu == "x64") {
     # This is a cross-compile from an x64 host to either a non-Intel target
     # cpu or a different target OS. Clang will always be used by default on the
diff --git a/src/base/debug/stack_trace_win.cc b/src/base/debug/stack_trace_win.cc
index f981bec610..574602f10b 100644
--- a/src/base/debug/stack_trace_win.cc
+++ b/src/base/debug/stack_trace_win.cc
@@ -29,6 +29,35 @@ namespace v8 {
 namespace base {
 namespace debug {
 
+#if 1 // dbghelp dependency unwanted
+
+bool EnableInProcessStackDumping() {
+  return false;
+}
+
+void DisableSignalStackDump() {
+}
+
+StackTrace::StackTrace() {
+}
+
+StackTrace::StackTrace(EXCEPTION_POINTERS* exception_pointers) {
+  InitTrace(exception_pointers->ContextRecord);
+}
+
+StackTrace::StackTrace(const CONTEXT* context) { InitTrace(context); }
+
+void StackTrace::InitTrace(const CONTEXT*) {
+}
+
+void StackTrace::Print() const { OutputToStream(&std::cerr); }
+
+void StackTrace::OutputToStream(std::ostream* os) const {
+    (*os) << "==== C stack trace not implemented for WINUWP ===============================\n";
+}
+
+#else // WINUWP
+
 namespace {
 
 // Previous unhandled filter. Will be called if not nullptr when we intercept an
@@ -244,6 +273,8 @@ void StackTrace::OutputToStream(std::ostream* os) const {
   }
 }
 
+#endif // dbghelp
+
 }  // namespace debug
 }  // namespace base
 }  // namespace v8
diff --git a/src/base/platform/platform-win32.cc b/src/base/platform/platform-win32.cc
index 6b5c5df496..2e76703d48 100644
--- a/src/base/platform/platform-win32.cc
+++ b/src/base/platform/platform-win32.cc
@@ -1110,8 +1110,8 @@ Win32MemoryMappedFile::~Win32MemoryMappedFile() {
 #define VOID void
 #endif
 
-// DbgHelp isn't supported on MinGW yet
-#ifndef __MINGW32__
+// DbgHelp isn't supported on Windows
+#if 0
 // DbgHelp.h functions.
 using DLL_FUNC_TYPE(SymInitialize) = BOOL(__stdcall*)(IN HANDLE hProcess,
                                                       IN PSTR UserSearchPath,
diff --git a/src/diagnostics/unwinding-info-win64.cc b/src/diagnostics/unwinding-info-win64.cc
index d50767421a..3d296db7c6 100644
--- a/src/diagnostics/unwinding-info-win64.cc
+++ b/src/diagnostics/unwinding-info-win64.cc
@@ -536,7 +536,7 @@ void RegisterNonABICompliantCodeRange(void* start, size_t size_in_bytes) {
   // by the embedder (like Crashpad).
 
   if (RegisterUnwindInfoForExceptionHandlingOnly()) {
-#if defined(V8_OS_WIN_X64)
+#if 0
     // Windows ARM64 starts since 1709 Windows build, no need to have exception
     // handling only unwind info for compatibility.
     if (unhandled_exception_callback_g) {
@@ -575,7 +575,7 @@ void UnregisterNonABICompliantCodeRange(void* start) {
   DCHECK(CanRegisterUnwindInfoForNonABICompliantCodeRange());
 
   if (RegisterUnwindInfoForExceptionHandlingOnly()) {
-#if defined(V8_OS_WIN_X64)
+#if 0
     // Windows ARM64 starts since 1709 Windows build, no need to have exception
     // handling only unwind info for compatibility.
     if (unhandled_exception_callback_g) {
diff --git a/src/objects/scope-info.cc b/src/objects/scope-info.cc
index 6cafd72d65..cbdd934cdd 100644
--- a/src/objects/scope-info.cc
+++ b/src/objects/scope-info.cc
@@ -973,7 +973,9 @@ int ScopeInfo::ReceiverContextSlotIndex() const {
 }
 
 int ScopeInfo::FunctionContextSlotIndex(String name) const {
-  DCHECK(name.IsInternalizedString());
+  // This debug check in failing when running CPU profiler on some V8-JSI instances.
+  // TODO: Investigate and find the root cause.
+  // DCHECK(name.IsInternalizedString());
   if (FunctionVariableBits::decode(Flags()) ==
           VariableAllocationInfo::CONTEXT &&
       FunctionName() == name) {
diff --git a/src/snapshot/embedded/platform-embedded-file-writer-base.cc b/src/snapshot/embedded/platform-embedded-file-writer-base.cc
index 447d2e9bac..d0df29e01c 100644
--- a/src/snapshot/embedded/platform-embedded-file-writer-base.cc
+++ b/src/snapshot/embedded/platform-embedded-file-writer-base.cc
@@ -139,7 +139,7 @@ EmbeddedTargetOs ToEmbeddedTargetOs(const char* s) {
     return EmbeddedTargetOs::kFuchsia;
   } else if (string == "ios" || string == "mac") {
     return EmbeddedTargetOs::kMac;
-  } else if (string == "win") {
+  } else if (string == "win" || string == "winuwp") {
     return EmbeddedTargetOs::kWin;
   } else if (string == "starboard") {
     return EmbeddedTargetOs::kStarboard;
diff --git a/src/utils/allocation.cc b/src/utils/allocation.cc
index 6f6225797a..54d31605fc 100644
--- a/src/utils/allocation.cc
+++ b/src/utils/allocation.cc
@@ -90,8 +90,10 @@ const int kAllocationTries = 2;
 }  // namespace
 
 v8::PageAllocator* GetPlatformPageAllocator() {
-  DCHECK_NOT_NULL(GetPageAllocatorInitializer()->page_allocator());
-  return GetPageAllocatorInitializer()->page_allocator();
+  // DCHECK_NOT_NULL(GetPageAllocatorInitializer()->page_allocator());
+  // return GetPageAllocatorInitializer()->page_allocator();
+
+  return V8::GetCurrentPlatform()->GetPageAllocator();
 }
 
 #ifdef V8_VIRTUAL_MEMORY_CAGE
diff --git a/src/wasm/wasm-module-builder.h b/src/wasm/wasm-module-builder.h
index 8eeac56afd..dc9e4479e4 100644
--- a/src/wasm/wasm-module-builder.h
+++ b/src/wasm/wasm-module-builder.h
@@ -433,7 +433,7 @@ class V8_EXPORT_PRIVATE WasmModuleBuilder : public ZoneObject {
   };
 
   struct WasmGlobal {
-    MOVE_ONLY_NO_DEFAULT_CONSTRUCTOR(WasmGlobal);
+    // MOVE_ONLY_NO_DEFAULT_CONSTRUCTOR(WasmGlobal);
 
     ValueType type;
     bool mutability;
