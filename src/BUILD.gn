declare_args() {
  # Sets -DV8JSI_ENABLE_INSPECTOR
  v8jsi_enable_inspector = true

  # Sets -DV8JSI_ENABLE_NODE_API
  v8jsi_enable_node_api = true
}

target("shared_library", "v8jsi") {
  sources = [
    "IsolateData.h",
    "MurmurHash.cpp",
    "MurmurHash.h",
    "V8Instrumentation.cpp",
    "V8Instrumentation.h",
    "V8JsiRuntime.cpp",
    "V8JsiRuntime_impl.h",
    "jsi/JSIDynamic.h",
    "jsi/decorator.h",
    "jsi/instrumentation.h",
    "jsi/jsi-inl.h",
    "jsi/jsi.cpp",
    "jsi/jsi.h",
    "jsi/jsilib-windows.cpp",
    "jsi/jsilib.h",
    "jsi/threadsafe.h",
    "public/ScriptStore.h",
    "public/V8JsiRuntime.h",
  ]

  if (v8jsi_enable_node_api) {
    sources += [
      "node-api/env-inl.h",
      "node-api/js_native_api.h",
      "node-api/js_native_api_types.h",
      "node-api/js_native_api_v8.cc",
      "node-api/js_native_api_v8.h",
      "node-api/js_native_api_v8_internals.h",
      "node-api/js_runtime_api.h",
      "node-api/util-inl.h",
      "node-api/v8_api.cpp",
      "public/compat.h",
      "public/v8_api.h",
    ]
  }

  if (is_win) {
    sources += [
      "etw/tracing.cpp",
      "etw/tracing.h",
      "version_gen.rc",
    ]

    if (v8jsi_enable_inspector) {
      sources += [
        "inspector/inspector_agent.cpp",
        "inspector/inspector_agent.h",
        "inspector/inspector_socket.cpp",
        "inspector/inspector_socket.h",
        "inspector/inspector_socket_server.cpp",
        "inspector/inspector_socket_server.h",
        "inspector/inspector_tcp.cpp",
        "inspector/inspector_tcp.h",
        "inspector/inspector_utils.cpp",
        "inspector/inspector_utils.h",
        "inspector/llhttp.c",
        "inspector/llhttp.h",
        "inspector/llhttp_api.c",
        "inspector/llhttp_http.c",
      ]
    }

    ldflags = [
      "/OPT:REF",
      "/INCREMENTAL:NO",
    ]

    if (!is_clang) {
      ldflags += [
        "/PDBSTRIPPED:v8jsi_stripped.dll.pdb",
        "/SOURCELINK:" + rebase_path("//jsi/source_link_gen.json"),
      ]
    }
  } else if (!is_mac) {
    ldflags = [ "-Wl,--allow-multiple-definition" ]
    ldflags += [ "-Wl,--version-script=" + rebase_path("//jsi/makev8jsi.lst") ]
  }

  include_dirs = [
    ".",
    "../include",
    "jsi",
    "public",
    getenv("ASIO_ROOT"),
  ]

  if (v8jsi_enable_node_api) {
    include_dirs += [ "node-api" ]
  }

  configs += [
    "//:toolchain",
    "//:internal_config_base",
    "//build/config/compiler:exceptions",
  ]
  configs -= [ "//build/config/compiler:no_exceptions" ]

  if (is_win) {
    configs -= [ "//build/config/compiler:cet_shadow_stack" ]
    configs -= [ "//build/config/win:default_incremental_linking" ]
    configs += [ "//build/config/win:win_msvc_cfg" ]
  }

  deps = [
    "//:v8_headers",
    "//:v8_monolith",
  ]

  defines = [ "BUILDING_V8JSI_SHARED" ]

  if (is_win) {
    libs = [
      "dbghelp.lib",
      "bcrypt.lib",
      "shlwapi.lib",
      "winmm.lib",
    ]
  }

  if (v8jsi_enable_inspector) {
    defines += [ "V8JSI_ENABLE_INSPECTOR" ]
  }
}

target("executable", "jsitests") {
  testonly = true

  deps = [
    ":v8jsi",
    "node-api/test:node_api_tests",
    "//build/win:default_exe_manifest",
    "//testing/gtest",
  ]

  configs += [
    "//:toolchain",
    "//:internal_config_base",
    "//build/config/compiler:exceptions",
    "//build/config/compiler:rtti",
  ]
  configs -= [
    "//build/config/compiler:no_exceptions",
    "//build/config/compiler:no_rtti",
  ]

  cflags = [ "-DJSI_V8_IMPL" ]

  # Run microtasks explicitly for JSI
  cflags += [ "-DJSI_SUPPORT_MICROTASKS" ]

  include_dirs = [
    ".",
    "jsi",
    "public",
  ]

  if (v8jsi_enable_node_api) {
    include_dirs += [
      "node-api/test",
      "node-api",
    ]
  }

  sources = [
    "jsi/JSIDynamic.h",
    "jsi/decorator.h",
    "jsi/instrumentation.h",
    "jsi/jsi-inl.h",
    "jsi/jsi.cpp",
    "jsi/jsi.h",
    "jsi/jsilib.h",
    "jsi/test/testlib.cpp",
    "jsi/test/testlib.h",
    "jsi/test/testlib_ext.cpp",
    "jsi/threadsafe.h",
    "public/compat.h",
    "public/v8_api.h",
    "testmain.cpp",
  ]

  if (is_win) {
    sources += [ "jsi/jsilib-windows.cpp" ]
  } else {
    sources += [ "jsi/jsilib-posix.cpp" ]
  }

  if (v8jsi_enable_node_api) {
    sources += [
      "node-api-jsi/ApiLoaders/JSRuntimeApi.cpp",
      "node-api-jsi/ApiLoaders/JSRuntimeApi.h",
      "node-api-jsi/ApiLoaders/JSRuntimeApi.inc",
      "node-api-jsi/ApiLoaders/NodeApi.cpp",
      "node-api-jsi/ApiLoaders/NodeApi.h",
      "node-api-jsi/ApiLoaders/NodeApi.inc",
      "node-api-jsi/ApiLoaders/V8Api.cpp",
      "node-api-jsi/ApiLoaders/V8Api.h",
      "node-api-jsi/ApiLoaders/V8Api.inc",
      "node-api-jsi/NodeApiJsiRuntime.cpp",
      "node-api-jsi/NodeApiJsiRuntime.h",
    ]

    if (is_win) {
      sources += [ "node-api-jsi/ApiLoaders/NodeApi_win.cpp" ]
    } else {
      sources += [ "node-api-jsi/ApiLoaders/NodeApi_posix.cpp" ]
    }
  }
}
